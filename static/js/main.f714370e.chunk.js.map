{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Active","props","Container","className","Row","Col","Alert","color","list","map","friend","key","name","xs","Button","outline","size","block","onClick","onHandleToggle","onRemoveFriend","InActive","Deleted","App","state","friends","input","json","handleRemoveFriend","bind","updateInput","handleAddFriend","handleToggle","fetch","then","res","setState","result","person","active","id","deleted","console","log","this","alert","currentState","concat","find","filter","e","value","target","fluid","Form","InputGroup","InputGroupAddon","addonType","Input","type","placeholder","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oWAeA,SAASA,EAAOC,GACd,OACE,kBAACC,EAAA,EAAD,CAAWC,UAAU,WACnB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,MAAM,WACX,wBAAIJ,UAAU,eAAd,aAKLF,EAAMO,KAAKC,KAAI,SAAAC,GAAM,OACpB,kBAACN,EAAA,EAAD,CAAKO,IAAKD,EAAOE,KAAMC,GAAG,KACxB,kBAACR,EAAA,EAAD,KACE,4BAAKK,EAAOE,OAEd,kBAACP,EAAA,EAAD,KACE,kBAACS,EAAA,EAAD,CACEC,SAAO,EACPR,MAAM,UACNS,KAAK,KACLC,OAAK,EACLC,QAAS,kBAAMjB,EAAMkB,eAAeT,EAAOE,QAL7C,eAUF,kBAACP,EAAA,EAAD,KACE,kBAACS,EAAA,EAAD,CACEC,SAAO,EACPR,MAAM,SACNS,KAAK,KACLC,OAAK,EACLC,QAAS,kBAAMjB,EAAMmB,eAAeV,EAAOE,QAL7C,gBAgBZ,SAASS,EAASpB,GAChB,OACE,kBAACC,EAAA,EAAD,CAAWC,UAAU,WACnB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,MAAM,WACX,wBAAIJ,UAAU,eAAd,eAKLF,EAAMO,KAAKC,KAAI,SAAAC,GAAM,OACpB,kBAACN,EAAA,EAAD,CAAKO,IAAKD,EAAOE,KAAMC,GAAG,KACxB,kBAACR,EAAA,EAAD,KACE,4BAAKK,EAAOE,OAEd,kBAACP,EAAA,EAAD,KACE,kBAACS,EAAA,EAAD,CACEC,SAAO,EACPR,MAAM,UACNS,KAAK,KACLC,OAAK,EACLC,QAAS,kBAAMjB,EAAMkB,eAAeT,EAAOE,QAL7C,kBAgBZ,SAASU,EAAQrB,GACf,OACE,kBAACC,EAAA,EAAD,CAAWC,UAAU,WACnB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,MAAM,UACX,wBAAIJ,UAAU,eAAd,cAILF,EAAMO,KAAKC,KAAI,SAAAC,GAAM,OACpB,kBAACN,EAAA,EAAD,CAAKO,IAAKD,EAAOE,KAAMC,GAAG,KACxB,kBAACR,EAAA,EAAD,KACE,4BAAKK,EAAOE,OAEd,kBAACP,EAAA,EAAD,KACE,kBAACS,EAAA,EAAD,CACEC,SAAO,EACPR,MAAM,SACNS,KAAK,KACLC,OAAK,EACLC,QAAS,kBAAMjB,EAAMkB,eAAeT,EAAOE,QAL7C,kB,IAoLGW,E,kDAnKb,WAAYtB,GAAQ,IAAD,8BACjB,cAAMA,IACDuB,MAAQ,CACXC,QAAS,GACTC,MAAO,GACPC,KAAM,IAER,EAAKC,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAC1B,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,gBAAkB,EAAKA,gBAAgBF,KAArB,gBACvB,EAAKG,aAAe,EAAKA,aAAaH,KAAlB,gBAVH,E,gEAaE,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIR,UAChBO,MAAK,SAAAT,GACJ,EAAKW,SAAS,CACZT,KAAMF,IAER,IAAMY,EAAS,EAAKb,MAAMG,KAAKlB,KAAI,SAAA6B,GAAM,MAAK,CAC5CC,QAAQ,EACRC,GAAIF,EAAO1B,KACXA,KAAM0B,EAAO1B,KACb6B,SAAS,MAEX,EAAKL,SAAS,CACZX,QAASY,IAEXK,QAAQC,IAAI,EAAKnB,MAAMC,c,wCAKF,KAArBmB,KAAKpB,MAAME,MACbmB,MAAM,sBAEND,KAAKR,UAAS,SAAAU,GACZ,MAAO,CACLrB,QAASqB,EAAarB,QAAQsB,OAAO,CACnC,CACEnC,KAAMkC,EAAapB,MACnBa,QAAQ,EACRE,SAAS,EACTD,GAAIM,EAAapB,SAGrBA,MAAO,S,mCAMFd,GACXgC,KAAKR,UAAS,SAAAU,GACZ,IAAMpC,EAASoC,EAAarB,QAAQuB,MAAK,SAAAtC,GAAM,OAAIA,EAAOE,OAASA,KACnE,MAAO,CACLa,QAASqB,EAAarB,QACnBwB,QAAO,SAAAvC,GAAM,OAAIA,EAAOE,OAASA,KACjCmC,OAAO,CACN,CACEnC,OACA2B,QAAS7B,EAAO6B,gB,yCAOT3B,GACjBgC,KAAKR,UAAS,SAAAU,GACZ,IAAMpC,EAASoC,EAAarB,QAAQuB,MAAK,SAAAtC,GAAM,OAAIA,EAAOE,OAASA,KACnE,MAAO,CACLa,QAASqB,EAAarB,QACnBwB,QAAO,SAAAvC,GAAM,OAAIA,EAAOE,OAASA,KACjCmC,OAAO,CACN,CACEnC,OACA6B,SAAU/B,EAAO+B,iB,kCAOjBS,GACV,IAAMC,EAAQD,EAAEE,OAAOD,MACvBP,KAAKR,SAAS,CACZV,MAAOyB,M,+BAID,IAAD,OAEP,OADAT,QAAQC,IAAI,cAEV,kBAACzC,EAAA,EAAD,CAAWC,UAAU,mBAAmBkD,MAAM,MAC5C,kBAACjD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACiD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAAC3C,EAAA,EAAD,CAAQI,QAAS0B,KAAKb,iBAAtB,WAEF,kBAAC2B,EAAA,EAAD,CACEC,KAAK,OACLC,YAAY,aACZT,MAAOP,KAAKpB,MAAME,MAClBmC,SAAUjB,KAAKd,kBAMzB,6BACA,kBAAC1B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACL,EAAD,CACEQ,KAAMoC,KAAKpB,MAAMC,QAAQwB,QAAO,SAAAvC,GAAM,OAAsB,IAAlBA,EAAO6B,UACjDnB,eAAgBwB,KAAKhB,mBACrBT,eAAgByB,KAAKZ,iBAI3B,6BACA,kBAAC5B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACgB,EAAD,CACEb,KAAMoC,KAAKpB,MAAMC,QAAQwB,QACvB,SAAAvC,GAAM,OAAsB,IAAlBA,EAAO6B,UAEnBpB,eAAgByB,KAAKZ,iBAI3B,6BACA,kBAAC5B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACiB,EAAD,CACEd,KAAMoC,KAAKpB,MAAMC,QAAQwB,QACvB,SAAAvC,GAAM,OAAuB,IAAnBA,EAAO+B,WAEnBtB,eAAgByB,KAAKZ,iBAI3B,kBAAC5B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACS,EAAA,EAAD,CACEI,QAAS,kBACP,EAAKkB,SAAS,CACZX,QAAS,OAHf,gB,GApJMqC,aChHEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.f714370e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport {\n  Button,\n  Form,\n  Input,\n  Label,\n  InputGroup,\n  InputGroupAddon,\n  Container,\n  Row,\n  Col,\n  Alert\n} from \"reactstrap\";\n\nfunction Active(props) {\n  return (\n    <Container className=\"mx-auto\">\n      <Row>\n        <Col>\n          <Alert color=\"success\">\n            <h1 className=\"text-center\">Active</h1>\n          </Alert>\n        </Col>\n      </Row>\n\n      {props.list.map(friend => (\n        <Row key={friend.name} xs=\"3\">\n          <Col>\n            <h6>{friend.name}</h6>\n          </Col>\n          <Col>\n            <Button\n              outline\n              color=\"primary\"\n              size=\"sm\"\n              block\n              onClick={() => props.onHandleToggle(friend.name)}\n            >\n              Deactivate\n            </Button>\n          </Col>\n          <Col>\n            <Button\n              outline\n              color=\"danger\"\n              size=\"sm\"\n              block\n              onClick={() => props.onRemoveFriend(friend.name)}\n            >\n              Remove\n            </Button>\n          </Col>\n        </Row>\n      ))}\n    </Container>\n  );\n}\n\nfunction InActive(props) {\n  return (\n    <Container className=\"mx-auto\">\n      <Row>\n        <Col>\n          <Alert color=\"warning\">\n            <h1 className=\"text-center\">InActive</h1>\n          </Alert>\n        </Col>\n      </Row>\n\n      {props.list.map(friend => (\n        <Row key={friend.name} xs=\"3\">\n          <Col>\n            <h6>{friend.name}</h6>\n          </Col>\n          <Col>\n            <Button\n              outline\n              color=\"success\"\n              size=\"sm\"\n              block\n              onClick={() => props.onHandleToggle(friend.name)}\n            >\n              Activate\n            </Button>\n          </Col>\n        </Row>\n      ))}\n    </Container>\n  );\n}\n\nfunction Deleted(props) {\n  return (\n    <Container className=\"mx-auto\">\n      <Row>\n        <Col>\n          <Alert color=\"danger\">\n            <h1 className=\"text-center\">Deleted</h1>\n          </Alert>\n        </Col>\n      </Row>\n      {props.list.map(friend => (\n        <Row key={friend.name} xs=\"3\">\n          <Col>\n            <h6>{friend.name}</h6>\n          </Col>\n          <Col>\n            <Button\n              outline\n              color=\"danger\"\n              size=\"sm\"\n              block\n              onClick={() => props.onHandleToggle(friend.name)}\n            >\n              Activate\n            </Button>\n          </Col>\n        </Row>\n      ))}\n    </Container>\n  );\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      friends: [],\n      input: \"\",\n      json: []\n    };\n    this.handleRemoveFriend = this.handleRemoveFriend.bind(this);\n    this.updateInput = this.updateInput.bind(this);\n    this.handleAddFriend = this.handleAddFriend.bind(this);\n    this.handleToggle = this.handleToggle.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(res => res.json())\n      .then(friends => {\n        this.setState({\n          json: friends\n        });\n        const result = this.state.json.map(person => ({\n          active: true,\n          id: person.name,\n          name: person.name,\n          deleted: false\n        }));\n        this.setState({\n          friends: result\n        });\n        console.log(this.state.friends);\n      });\n  }\n\n  handleAddFriend() {\n    if (this.state.input === \"\") {\n      alert(\"Please type a name\");\n    } else {\n      this.setState(currentState => {\n        return {\n          friends: currentState.friends.concat([\n            {\n              name: currentState.input,\n              active: true,\n              deleted: false,\n              id: currentState.input\n            }\n          ]),\n          input: \"\"\n        };\n      });\n    }\n  }\n\n  handleToggle(name) {\n    this.setState(currentState => {\n      const friend = currentState.friends.find(friend => friend.name === name);\n      return {\n        friends: currentState.friends\n          .filter(friend => friend.name !== name)\n          .concat([\n            {\n              name,\n              active: !friend.active\n            }\n          ])\n      };\n    });\n  }\n\n  handleRemoveFriend(name) {\n    this.setState(currentState => {\n      const friend = currentState.friends.find(friend => friend.name === name);\n      return {\n        friends: currentState.friends\n          .filter(friend => friend.name !== name)\n          .concat([\n            {\n              name,\n              deleted: !friend.deleted\n            }\n          ])\n      };\n    });\n  }\n\n  updateInput(e) {\n    const value = e.target.value;\n    this.setState({\n      input: value\n    });\n  }\n\n  render() {\n    console.log(\"--Render--\");\n    return (\n      <Container className=\"themed-container\" fluid=\"sm\">\n        <Row>\n          <Col>\n            <Form>\n              <InputGroup>\n                <InputGroupAddon addonType=\"prepend\">\n                  <Button onClick={this.handleAddFriend}>Submit</Button>\n                </InputGroupAddon>\n                <Input\n                  type=\"text\"\n                  placeholder=\"New Friend\"\n                  value={this.state.input}\n                  onChange={this.updateInput}\n                />\n              </InputGroup>\n            </Form>\n          </Col>\n        </Row>\n        <br />\n        <Row>\n          <Col>\n            <Active\n              list={this.state.friends.filter(friend => friend.active === true)}\n              onRemoveFriend={this.handleRemoveFriend}\n              onHandleToggle={this.handleToggle}\n            />\n          </Col>\n        </Row>\n        <br />\n        <Row>\n          <Col>\n            <InActive\n              list={this.state.friends.filter(\n                friend => friend.active === false\n              )}\n              onHandleToggle={this.handleToggle}\n            />\n          </Col>\n        </Row>\n        <br />\n        <Row>\n          <Col>\n            <Deleted\n              list={this.state.friends.filter(\n                friend => friend.deleted === true\n              )}\n              onHandleToggle={this.handleToggle}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Button\n              onClick={() =>\n                this.setState({\n                  friends: []\n                })\n              }\n            >\n              Clear\n            </Button>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}